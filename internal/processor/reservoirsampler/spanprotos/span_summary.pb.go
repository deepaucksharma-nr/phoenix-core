// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internal/processor/reservoirsampler/spanprotos/span_summary.proto

package spanprotos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// SpanSummary is a lightweight representation of a span for the reservoir
type SpanSummary struct {
	// Required: IDs for referencing
	TraceId []byte `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SpanId  []byte `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	// Required: Keys for identification
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind string `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
	// Optional: Timing information
	StartTimeUnixNano int64 `protobuf:"varint,5,opt,name=start_time_unix_nano,json=startTimeUnixNano,proto3" json:"start_time_unix_nano,omitempty"`
	EndTimeUnixNano   int64 `protobuf:"varint,6,opt,name=end_time_unix_nano,json=endTimeUnixNano,proto3" json:"end_time_unix_nano,omitempty"`
	// Optional: Service context
	ServiceName string `protobuf:"bytes,7,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Optional: Status information
	StatusCode    int32  `protobuf:"varint,8,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMessage string `protobuf:"bytes,9,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	// Optional: Parent span ID if available
	ParentSpanId []byte `protobuf:"bytes,10,opt,name=parent_span_id,json=parentSpanId,proto3" json:"parent_span_id,omitempty"`
	// Optional: Tenant ID for multi-tenant support
	TenantId             string   `protobuf:"bytes,11,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpanSummary) Reset()         { *m = SpanSummary{} }
func (m *SpanSummary) String() string { return proto.CompactTextString(m) }
func (*SpanSummary) ProtoMessage()    {}
func (*SpanSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_c70bdc066cf0fcbb, []int{0}
}

func (m *SpanSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpanSummary.Unmarshal(m, b)
}
func (m *SpanSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpanSummary.Marshal(b, m, deterministic)
}
func (m *SpanSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanSummary.Merge(m, src)
}
func (m *SpanSummary) XXX_Size() int {
	return xxx_messageInfo_SpanSummary.Size(m)
}
func (m *SpanSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanSummary.DiscardUnknown(m)
}

var xxx_messageInfo_SpanSummary proto.InternalMessageInfo

func (m *SpanSummary) GetTraceId() []byte {
	if m != nil {
		return m.TraceId
	}
	return nil
}

func (m *SpanSummary) GetSpanId() []byte {
	if m != nil {
		return m.SpanId
	}
	return nil
}

func (m *SpanSummary) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SpanSummary) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *SpanSummary) GetStartTimeUnixNano() int64 {
	if m != nil {
		return m.StartTimeUnixNano
	}
	return 0
}

func (m *SpanSummary) GetEndTimeUnixNano() int64 {
	if m != nil {
		return m.EndTimeUnixNano
	}
	return 0
}

func (m *SpanSummary) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *SpanSummary) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *SpanSummary) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *SpanSummary) GetParentSpanId() []byte {
	if m != nil {
		return m.ParentSpanId
	}
	return nil
}

func (m *SpanSummary) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

// SpanSummaryBatch is a batch of SpanSummary objects
type SpanSummaryBatch struct {
	Summaries            []*SpanSummary `protobuf:"bytes,1,rep,name=summaries,proto3" json:"summaries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SpanSummaryBatch) Reset()         { *m = SpanSummaryBatch{} }
func (m *SpanSummaryBatch) String() string { return proto.CompactTextString(m) }
func (*SpanSummaryBatch) ProtoMessage()    {}
func (*SpanSummaryBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_c70bdc066cf0fcbb, []int{1}
}

func (m *SpanSummaryBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpanSummaryBatch.Unmarshal(m, b)
}
func (m *SpanSummaryBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpanSummaryBatch.Marshal(b, m, deterministic)
}
func (m *SpanSummaryBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpanSummaryBatch.Merge(m, src)
}
func (m *SpanSummaryBatch) XXX_Size() int {
	return xxx_messageInfo_SpanSummaryBatch.Size(m)
}
func (m *SpanSummaryBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_SpanSummaryBatch.DiscardUnknown(m)
}

var xxx_messageInfo_SpanSummaryBatch proto.InternalMessageInfo

func (m *SpanSummaryBatch) GetSummaries() []*SpanSummary {
	if m != nil {
		return m.Summaries
	}
	return nil
}

// ReservoirCheckpoint represents a complete reservoir checkpoint
type ReservoirCheckpoint struct {
	// Required: Metadata about the checkpoint
	TotalSeen uint64 `protobuf:"varint,1,opt,name=total_seen,json=totalSeen,proto3" json:"total_seen,omitempty"`
	// t0 timestamp
	WindowStartTime int64 `protobuf:"varint,2,opt,name=window_start_time,json=windowStartTime,proto3" json:"window_start_time,omitempty"`
	// Required: Span summaries in the reservoir
	Spans                *SpanSummaryBatch `protobuf:"bytes,3,opt,name=spans,proto3" json:"spans,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ReservoirCheckpoint) Reset()         { *m = ReservoirCheckpoint{} }
func (m *ReservoirCheckpoint) String() string { return proto.CompactTextString(m) }
func (*ReservoirCheckpoint) ProtoMessage()    {}
func (*ReservoirCheckpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_c70bdc066cf0fcbb, []int{2}
}

func (m *ReservoirCheckpoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReservoirCheckpoint.Unmarshal(m, b)
}
func (m *ReservoirCheckpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReservoirCheckpoint.Marshal(b, m, deterministic)
}
func (m *ReservoirCheckpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReservoirCheckpoint.Merge(m, src)
}
func (m *ReservoirCheckpoint) XXX_Size() int {
	return xxx_messageInfo_ReservoirCheckpoint.Size(m)
}
func (m *ReservoirCheckpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_ReservoirCheckpoint.DiscardUnknown(m)
}

var xxx_messageInfo_ReservoirCheckpoint proto.InternalMessageInfo

func (m *ReservoirCheckpoint) GetTotalSeen() uint64 {
	if m != nil {
		return m.TotalSeen
	}
	return 0
}

func (m *ReservoirCheckpoint) GetWindowStartTime() int64 {
	if m != nil {
		return m.WindowStartTime
	}
	return 0
}

func (m *ReservoirCheckpoint) GetSpans() *SpanSummaryBatch {
	if m != nil {
		return m.Spans
	}
	return nil
}

func init() {
	proto.RegisterType((*SpanSummary)(nil), "spanprotos.SpanSummary")
	proto.RegisterType((*SpanSummaryBatch)(nil), "spanprotos.SpanSummaryBatch")
	proto.RegisterType((*ReservoirCheckpoint)(nil), "spanprotos.ReservoirCheckpoint")
}

func init() {
	proto.RegisterFile("internal/processor/reservoirsampler/spanprotos/span_summary.proto", fileDescriptor_c70bdc066cf0fcbb)
}

var fileDescriptor_c70bdc066cf0fcbb = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x86, 0x63, 0x27, 0x4d, 0x3a, 0x69, 0x5a, 0xb4, 0x2a, 0x87, 0x10, 0x84, 0x64, 0x99, 0x43,
	0xb9, 0x58, 0x0a, 0x9c, 0xb8, 0x42, 0xd2, 0x03, 0x07, 0x2e, 0x91, 0xcb, 0x05, 0x71, 0x59, 0x2d,
	0xeb, 0x59, 0xdb, 0x2b, 0xef, 0xee, 0x6a, 0xbd, 0x09, 0xfc, 0x3a, 0xfe, 0x01, 0xbf, 0x0b, 0xf1,
	0x31, 0xf7, 0x1c, 0x28, 0xde, 0x8f, 0xf8, 0x73, 0xa7, 0x19, 0xbf, 0xef, 0xbc, 0x86, 0xcf, 0xbd,
	0x54, 0x7d, 0xd5, 0x25, 0x8d, 0x14, 0xb1, 0x36, 0x5a, 0x55, 0xda, 0xd8, 0xba, 0x53, 0xda, 0xaa,
	0xba, 0x6d, 0x94, 0xb5, 0xc9, 0x5d, 0xd7, 0x6a, 0x8b, 0xde, 0x9a, 0x54, 0xde, 0xa1, 0xcd, 0x6b,
	0xc4, 0xaa, 0xd2, 0xa8, 0xe8, 0x8c, 0x71, 0x7a, 0xc1, 0x9a, 0x62, 0xb0, 0xfa, 0xf1, 0x93, 0x4a,
	0xa8, 0x88, 0xba, 0x44, 0x92, 0x95, 0x46, 0xd5, 0xca, 0x10, 0xed, 0x58, 0xdd, 0xbb, 0x5f, 0x56,
	0x95, 0x46, 0x62, 0xed, 0x0d, 0x92, 0x4b, 0xfa, 0x6b, 0x90, 0xbf, 0xff, 0xed, 0x03, 0xfc, 0x30,
	0xb6, 0x84, 0x7c, 0x83, 0xb3, 0xc2, 0xed, 0xb3, 0x79, 0xb8, 0x0c, 0x57, 0x67, 0xb1, 0xd7, 0x2b,
	0xf8, 0xe0, 0x1a, 0xaa, 0x4b, 0xf1, 0x0e, 0x26, 0xb9, 0x2c, 0xd9, 0xd9, 0x3c, 0x5c, 0x8e, 0x56,
	0xb3, 0xf8, 0x52, 0x16, 0xb1, 0xeb, 0x13, 0xbd, 0x01, 0xf9, 0x02, 0x13, 0x6d, 0xb4, 0x56, 0x25,
	0x1b, 0xb9, 0x89, 0x97, 0xff, 0x98, 0xd8, 0x1a, 0x5d, 0xc6, 0x6e, 0x4a, 0xbc, 0x85, 0x91, 0xe3,
	0xb3, 0xf1, 0x3c, 0x5c, 0x4e, 0x56, 0xb3, 0xf8, 0xc5, 0xc3, 0x39, 0xda, 0xc9, 0xf0, 0xde, 0x47,
	0x7c, 0x85, 0x89, 0xac, 0x55, 0x43, 0x6c, 0xe2, 0xd6, 0xbf, 0x7e, 0x5c, 0xbf, 0x57, 0x0d, 0x39,
	0x7e, 0xfa, 0xb1, 0xd9, 0x67, 0x9a, 0xc4, 0x0b, 0x18, 0x65, 0x32, 0x63, 0x53, 0xa7, 0x05, 0x7f,
	0x9f, 0xc9, 0x4c, 0x7c, 0x80, 0xf1, 0x56, 0xdf, 0x51, 0xcd, 0xce, 0xdc, 0xf2, 0xab, 0x27, 0x96,
	0x6f, 0x1c, 0x20, 0xf6, 0x12, 0x5a, 0x82, 0x70, 0x1c, 0xb7, 0xb5, 0x92, 0x05, 0x3b, 0x77, 0xe4,
	0xeb, 0xc7, 0xc8, 0xdf, 0x8a, 0xfb, 0x83, 0xdc, 0x23, 0x9a, 0xc1, 0x38, 0xd3, 0x92, 0xb8, 0x51,
	0x6c, 0xee, 0xbe, 0xe7, 0xc9, 0x90, 0x77, 0xd5, 0xae, 0xde, 0x13, 0xee, 0xfd, 0xe0, 0x45, 0xb6,
	0x86, 0xcb, 0x3d, 0x92, 0x69, 0x2b, 0x49, 0xdb, 0x1b, 0x2c, 0x88, 0xc5, 0xae, 0x72, 0xcc, 0x01,
	0xb7, 0x1d, 0xb4, 0xd0, 0xe0, 0x7f, 0x68, 0x80, 0x46, 0x1f, 0x1a, 0xa9, 0xd5, 0x93, 0x0c, 0x0a,
	0xf1, 0x0d, 0x5e, 0x3d, 0xec, 0x8a, 0xb3, 0xbd, 0x8e, 0x46, 0xf7, 0x51, 0x5d, 0x9f, 0x02, 0xd8,
	0xd9, 0xb4, 0x13, 0x0e, 0xfd, 0xf5, 0x27, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x4e, 0xf3, 0xa9, 0xbc,
	0x02, 0x00, 0x00,
}